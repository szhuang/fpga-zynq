# This file is sourced by all Zynq7000 boards' subdirectory

TOP_MODULE_PROJECT ?= zynq
CONFIG ?= ZynqConfig
HOST = arm-linux-gnueabihf

# Platform software generation
# ------------------------------------------------------------------------------
arm_linux_dir = $(base_dir)/common/linux-xlnx
uboot_dir = $(base_dir)/common/u-boot-xlnx
soft_build_dir = soft_build

arm-linux: arm-uboot # must first build uboot because we need tools
	# compile kernel
	git submodule update --init $(arm_linux_dir)
	# no make clean included here since one copy of linux should work on all boards
	cd $(arm_linux_dir) && make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- xilinx_zynq_defconfig
	cd $(arm_linux_dir) && make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -j$(JOBS)
	# convert zImage to uImage
	cd $(arm_linux_dir) && export PATH=$(uboot_dir)/tools:$$PATH && make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- UIMAGE_LOADADDR=0x8000 uImage
	mkdir -p $(output_delivery)
	cp $(arm_linux_dir)/arch/arm/boot/uImage $(output_delivery)/

arm-uboot:
	# compile board-compatible u-boot
	git submodule update --init $(uboot_dir)
	# copy relevant configuration files
	if [ -a soft_config/boards.cfg ] ; \
	then \
	    cp soft_config/boards.cfg $(uboot_dir)/ ; \
	fi;
	# actually build
	cd $(uboot_dir) && make CROSS_COMPILE=arm-linux-gnueabihf- zynq_$(UBOOT_CONFIG)_config
	cd $(uboot_dir) && make CROSS_COMPILE=arm-linux-gnueabihf- -j$(JOBS)
	mkdir -p $(soft_build_dir)
	cp $(uboot_dir)/u-boot.elf $(soft_build_dir)/u-boot.elf

arm-dtb:
	export PATH=$(arm_linux_dir)/scripts/dtc:$$PATH && dtc -I dts -O dtb -o $(output_delivery)/devicetree.dtb soft_config/$(BOARD)_devicetree.dts

# Handle images and git submodule for prebuilt modules
# ------------------------------------------------------------------------------
images = fpga-images-$(BOARD)/boot.bif
$(images):
	git submodule update --init --depth=1 fpga-images-$(BOARD)

fetch-images: $(images)

$(bootimage): $(images) $(bitstream)
	ln -sf ../../$(bitstream) fpga-images-$(BOARD)/boot_image/rocketchip_wrapper.bit
	cd fpga-images-$(BOARD); bootgen -image boot.bif -w -o boot.bin

load-sd: $(images)
	$(base_dir)/common/load_card.sh $(SD)

ramdisk-open: $(images)
	mkdir ramdisk
	dd if=fpga-images-$(BOARD)/uramdisk.image.gz  bs=64 skip=1 | \
	gunzip -c | sudo sh -c 'cd ramdisk/ && cpio -i'

ramdisk-close:
	@if [ ! -d "ramdisk" ]; then \
		echo "No ramdisk to close (use make ramdisk-open first)"; \
		exit 1; \
	fi
	sh -c 'cd ramdisk/ && sudo find . | sudo cpio -H newc -o' | gzip -9 > uramdisk.cpio.gz
	mkimage -A arm -O linux -T ramdisk -d uramdisk.cpio.gz fpga-images-$(BOARD)/uramdisk.image.gz
	rm uramdisk.cpio.gz
	@echo "Don't forget to remove ramdisk before opening it again (sudo rm -rf ramdisk)"

# Fetch ramdisk for user building from scratch
# ------------------------------------------------------------------------------
s3_url = https://s3-us-west-1.amazonaws.com/riscv.org/fpga-zynq-files
ramdisk_url = $(s3_url)/uramdisk.image.gz
fetch-ramdisk:
	mkdir -p $(output_delivery)
	curl $(ramdisk_url) > $(output_delivery)/uramdisk.image.gz
.PHONY: fetch-images load_card ramdisk-open ramdisk-close

include ../common/Makefrag
