# This makefrag is sourced by each board's subdirectory

JOBS = 16
ROCKET_DIR ?= $(base_dir)/rocket-chip
TOP_MODULE ?= Top
CFG_PROJECT ?= $(TOP_MODULE_PROJECT)
SCALA_VERSION=2.11.12
EXTRA_PACKAGES=testchipip

base_dir = $(abspath ..)
common = $(base_dir)/common
common_build = $(common)/build
testchipip = $(base_dir)/testchipip
output_delivery = deliver_output
SHELL := /bin/bash

bootrom_img = $(testchipip)/bootrom/bootrom.rv64.img $(testchipip)/bootrom/bootrom.rv32.img
rocketchip_stamp = $(common)/lib/rocketchip.stamp
extra_stamps = $(addprefix $(common)/lib/,$(addsuffix .stamp,$(EXTRA_PACKAGES)))

ifneq ($(BOARD_MODEL),)
	insert_board = s/\# REPLACE FOR OFFICIAL BOARD NAME/set_property "board_part" "$(BOARD_MODEL)"/g
endif

proj_name = $(BOARD)_rocketchip_$(CONFIG)

verilog_srcs = \
	src/verilog/clocking.vh \
	src/verilog/rocketchip_$(TOP_MODULE_PROJECT)_wrapper.v \
	src/verilog/$(TOP_MODULE).$(CONFIG).v \
	src/verilog/AsyncResetReg.v \
	src/verilog/plusarg_reader.v \

bootimage = fpga-images-$(BOARD)/boot.bin
bootimage: $(bootimage)

# Taken from rocket chip 2a5aeea. TODO: Maybe source this directly from makefrag?
SBT ?= java -Xmx2G -Xss8M -XX:MaxPermSize=256M -jar $(ROCKET_DIR)/sbt-launch.jar

FIRRTL_JAR ?= $(ROCKET_DIR)/firrtl/utils/bin/firrtl.jar
FIRRTL ?= java -Xmx2G -Xss8M -XX:MaxPermSize=256M -cp $(FIRRTL_JAR) firrtl.Driver

$(FIRRTL_JAR): $(shell find $(ROCKET_DIR)/firrtl/src/main/scala -iname "*.scala" 2> /dev/null)
	$(MAKE) -C $(ROCKET_DIR)/firrtl SBT="$(SBT)" root_dir=$(ROCKET_DIR)/firrtl build-scala

CHISEL_ARGS := $(common_build)

lookup_scala_srcs = $(shell find $(1)/. -iname "*.scala" 2> /dev/null)

# Initialize rocket-chip submodule
# ------------------------------------------------------------------------------

init-submodules:
	cd $(base_dir) && git submodule update --init rocket-chip $(EXTRA_PACKAGES)
	cd $(ROCKET_DIR) && git submodule update --init

# Specialize sources for board
# ------------------------------------------------------------------------------
src/verilog/rocketchip_$(TOP_MODULE_PROJECT)_wrapper.v: $(common)/rocketchip_$(TOP_MODULE_PROJECT)_wrapper.v
	cp $(common)/rocketchip_$(TOP_MODULE_PROJECT)_wrapper.v src/verilog/rocketchip_wrapper.v

src/tcl/$(proj_name).tcl: $(common)/$(TOP_MODULE_PROJECT)_rocketchip.tcl Makefile
	sed 's/BOARD_NAME_HERE/$(BOARD)/g;s/PART_NUMBER_HERE/$(PART)/g;$(insert_board);s/CHISEL_CONFIG_HERE/$(CONFIG)/g' \
		$(common)/$(TOP_MODULE_PROJECT)_rocketchip.tcl > src/tcl/$(proj_name).tcl

src/tcl/make_bitstream_$(CONFIG).tcl: $(common)/make_bitstream.tcl
	sed 's/BOARD_NAME_HERE/$(BOARD)/g;s/CHISEL_CONFIG_HERE/$(CONFIG)/g' \
		$(common)/make_bitstream.tcl > src/tcl/make_bitstream_$(CONFIG).tcl

src/verilog/%.v: $(ROCKET_DIR)/vsrc/%.v
	cp $< $@

$(ROCKET_DIR)/lib/firrtl.jar: $(FIRRTL_JAR)
	mkdir -p $(@D)
	cp $< $@

$(rocketchip_stamp): $(call lookup_scala_srcs, $(ROCKET_DIR)) $(ROCKET_DIR)/lib/firrtl.jar
	cd $(ROCKET_DIR) && $(SBT) pack
	mkdir -p $(common)/lib
	cp $(ROCKET_DIR)/target/pack/lib/* $(common)/lib
	touch $(rocketchip_stamp)

$(common)/Makefrag.pkgs: $(common)/generate-pkg-mk.sh
	bash $(common)/generate-pkg-mk.sh $(EXTRA_PACKAGES) > $@

-include $(common)/Makefrag.pkgs

$(common_build)/$(TOP_MODULE).$(CONFIG).fir: $(rocketchip_stamp) $(extra_stamps) $(bootrom_img) $(call lookup_scala_srcs,$(common))
	mkdir -p $(@D)
	cd $(common) && $(SBT) "run $(CHISEL_ARGS) $(TOP_MODULE_PROJECT) $(TOP_MODULE) $(CFG_PROJECT) $(CONFIG)"

$(common_build)/$(TOP_MODULE).$(CONFIG).v: $(common_build)/$(TOP_MODULE).$(CONFIG).fir $(FIRRTL_JAR)
	$(FIRRTL) -i $< -o $@ -X verilog

src/verilog/$(TOP_MODULE).$(CONFIG).v: $(common_build)/$(TOP_MODULE).$(CONFIG).v
	cp $< $@

rocket: src/verilog/$(TOP_MODULE).$(CONFIG).v


# Project generation
# ------------------------------------------------------------------------------
project = $(proj_name)/$(proj_name).xpr
$(project): src/tcl/$(proj_name).tcl | $(verilog_srcs) 
	rm -rf $(proj_name)
	vivado -mode tcl -source src/tcl/$(proj_name).tcl;

project: $(project)

vivado: $(project)
	vivado $(project) &

bitstream = $(proj_name)/$(proj_name).runs/impl_1/rocketchip_wrapper.bit
$(bitstream): src/tcl/make_bitstream_$(CONFIG).tcl $(verilog_srcs) src/constrs/base.xdc | $(project)
	vivado -mode tcl -source src/tcl/make_bitstream_$(CONFIG).tcl
bitstream: $(bitstream)

# Rebuild from bif for user building from scratch
# ------------------------------------------------------------------------------
$(output_delivery)/boot.bin:
	cd $(output_delivery); bootgen -image output.bif -w -o boot.bin

# Build riscv-fesvr for zynq
# ------------------------------------------------------------------------------

fesvr-main = fesvr-zynq
fesvr-srcs = \
	$(common)/csrc/fesvr_zynq.cc \
	$(common)/csrc/zynq_driver.cc \
	$(testchipip)/csrc/blkdev.cc \

fesvr-hdrs = \
	$(common)/csrc/zynq_driver.h \
	$(testchipip)/csrc/blkdev.h \

fesvr-lib = $(common_build)/libfesvr.so

CXX_FPGA      = $(HOST)-g++
CXXFLAGS_FPGA = -O2 -std=c++11 -Wall -L$(common_build) -lfesvr \
                -Wl,-rpath,/usr/local/lib \
		-I $(common)/csrc -I $(testchipip)/csrc \
		-I $(ROCKET_DIR)/riscv-tools/riscv-fesvr/ \
		-Wl,-rpath,/usr/local/lib \

$(fesvr-lib):
	mkdir -p $(common_build)
	cd $(common_build) && \
	$(ROCKET_DIR)/riscv-tools/riscv-fesvr/configure \
		--host=$(HOST) && \
	make libfesvr.so

$(common_build)/$(fesvr-main): $(fesvr-lib) $(fesvr-srcs) $(fesvr-hdrs)
	$(CXX_FPGA) $(CXXFLAGS_FPGA) -o $(common_build)/$(fesvr-main) $(fesvr-srcs)

fesvr-zynq: $(common_build)/$(fesvr-main)

clean:
	rm -f *.log *.jou *.str
	rm -rf csrc simv-* output ucli.key vc_hdrs.h DVEfiles

.PHONY: vivado project init-submodules rocket fesvr-zynq clean
